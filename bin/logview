#!/usr/bin/env python

import sys

sys.path.append(".")

# isort: split
import argparse
import json
import time

from kube.async_loop import launch_in_background_thread
from kube.cluster_facade import SyncClusterFacade
from kube.config import get_selector
from kube.model.api_resource import PodKind
from kube.model.selector import ObjectSelector
from kube.tools.logs import configure_logging


def main(args: argparse.Namespace) -> None:
    configure_logging(filename="var/log/logview.log")
    async_loop = launch_in_background_thread()

    ctx_selector = get_selector()
    context = ctx_selector.fnmatch_context(args.cluster_context)[0]

    selector = ObjectSelector(
        res=PodKind,
        namespace=args.namespace,
        podname=args.pod,
        contname=args.container,
    )

    facade = SyncClusterFacade(async_loop=async_loop, context=context)
    oev_receiver = facade.start_stream_pod_logs(selector=selector)

    try:
        while True:
            event = oev_receiver.recv_nowait()
            if event:
                try:
                    dct = json.loads(event.object)
                    sev = dct.get("severity", "")
                    print(sev.upper(), dct)
                except ValueError:
                    pass

            else:
                time.sleep(0.3)

    except KeyboardInterrupt:
        print("\nCtrl-C received")
        facade.stop_stream_pod_logs(selector=selector)
        async_loop.shutdown()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-c",
        "--cluster",
        dest="cluster_context",
        action="store",
        required=True,
    )
    parser.add_argument(
        "-n",
        "--namespace",
        dest="namespace",
        action="store",
        required=True,
    )
    parser.add_argument(
        "-p",
        "--pod",
        dest="pod",
        action="store",
        required=True,
    )
    parser.add_argument(
        "--container",
        dest="container",
        action="store",
        required=True,
    )
    args = parser.parse_args()

    main(args)
